/**
 * # Module loader
 */

/**
 * ## `import-resolve`
 * Resolve path relative to file
 */
__import-resolve: [ ( prelude.__sys_path__ ) >> resolve ] ;

__include: [ read eval ] ;

 /**
 * ## `load`
 * Reads a file onto the stack as a string and evaluates the content
 */
include: [ __import-resolve __include ] ;;

// Make private?
__module_name: [ btoa ] ;

/**
 * ## `import-module`
 * Loads and creates a module from a file
 */
__load-module: [ [ dup '__filename__' sto __include create-module send ] >> fork drop dup 'scoped' @ use 'locals' @ ] ;
__load-and-sto-module: [ dup __load-module swap __module_name sto ] ;;

import: [
  __import-resolve dup
  __module_name rcl dup boolean
    [ swap drop ]
    [ drop dup __load-and-sto-module btoa rcl ]
    choose eval
] ;;

/**
 * ## `if-exists-load`
 * Loads a file if it exists
 */
if-exists-load: [ dup exists swap [ __include ] >> [ ] choose eval ] ;;
