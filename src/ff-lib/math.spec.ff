[ 0 acos pi 2 / assert_equal ] 'calculates acos(0) = pi/2' test
[ 1 acos assert_zero ] 'calculates acos(1) = 0' test

[ 1 ln assert_zero ] 'calculates ln(1) = 0' test

[ 1e10 log 10 assert_equal ] 'calculates log(10^10) = 10' test
[ 1 log 0 assert_equal ] 'calculates log(1) = 1' test
[ 10 log 1 assert_equal ] 'calculates log(1) = 1' test
[ 100 log 2 assert_equal ] 'calculates log(1) = 1' test

[ 1 10 logn 0 assert_equal ] 'calculates logn(1, 10) = 1' test
[ 10 10 logn 1 assert_equal ] 'calculates logn(1, 10) = 1' test
[ 100 10 logn 2 assert_equal ] 'calculates logn(1, 10) = 1' test

[ 5 ! 120 assert_equal ] 'calculates 5 !' test
[ 20 ! 2432902008176640000 assert_equal ] 'calculates 20 !' test

[ 3 2 ^^^ 7625597484987 assert_equal ] 'up-arrow notation' test