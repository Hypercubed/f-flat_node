/**
 * # Core defined words
 */
'types.ff' require

// core shuffle words
slip: [ q< eval q> ] ;      // [b] A -> b A
run: [ dup slip ] ;;        // [a] -> a [a]
dip: [ swap slip ] ;;       // B [a] -> a B

// diped
dupd: [ q< dup q> ] ;       // B A -> B B A
over: [ dupd swap ] ;;      // B A -> B A B  (aka peek)
sip: [ over slip ] ;;       // B [a] -> B a B    (aka keep)
dipd: [ q< dip q> ] ;;      // D C [b] A -> D b C A
sipd: [ q< sip q> ] ;;      // C B [a] -> C a C B
slipd: [ q< slip q> ] ;;    // [c] B A -> c B A
swapd: [ q< swap q> ] ;     // C B A -> B C A
dive: [ swap dipd ] ;       // [c] [b] [a] -> a [c] [b]   (aka dip2)
dup2: [ over over ] ;         // B A -> B A B A

bi: [ sipd eval ] ;;        // C [b] [a] -> C b C a
do: [ dup dipd ] ;;

// keep/check
keep: [ over slip ] ;;      // B [a] -> B a B    (aka sip)
check: [ dupd eval ] ;;     // B [a] -> B B a    (aka w)

// truthy/falsy
truthy?: [ boolean ] ;
falsy?: [ truthy? ~ ] ;;

// incrementors
--: [ 1 - ] ;
++: [ 1 + ] ;
pred: [ dup -- ] ;
succ: [ dup ++ ] ;

// Comparisons
>: [ <=> 1 = ] ;
<: [ <=> -1 = ] ;
>=: [ < ~ ] ;;
<=: [ > ~ ] ;;
=<: [ > ~ ] ;;
!=: [ = ~ ] ;

max: [ dup2 q< q< > q> q> choose ] ;; // aka greater-of
min: [ dup2 q< q< < q> q> choose ] ;; // lesser-of

// 
get: [ q< @ dup null? swap q> swap choose ] ;
zipwith: [ zipinto in ] ;
return: [ stack send ] ;
yield: [ return suspend ] ;
delay: [ [ sleep ] >> slip eval ] ;

// control
_check: [ [ truthy? ] dive ] ;
branch: [ _check choose eval ] ;;
when: [ [ ] branch ] ;
unless: [ [ ] swap branch ] ;
ifte: [ slipd branch ] ;;
if: [ slip when ] ;
loop: [ [ eval ] keep [ loop ] >> when ] ;
while: [ swap do + [ loop ] >> when ] ;

// aggregates
slice: [ [ % ] dip \ ] ;
pop: [ -1 \ ] ;
shift: [ 1 % ] ;
car: [ 0 @ ] ;
cdr: [ 1 % ] ;
first: [ 0 @ ] ;
last: [ -1 @ ] ;
rest: [ 1 % ] ;
head: [ \ ] ;
tail: [ % ] ;
startswith: [ dup ln [ head ] >> dip = ] ;;
endswith: [ dup ln [ tail ] >> dip = ] ;;
contains: [ indexof 1 > ] ;

// lists
empty?: [ ln 0 = ] ;
unit: [ [ ] >> ] ;
cons: [ >> ] ;
pair: [ unit >> ] ;
uncons: [ [ first ] [ rest ] bi ] ;;

// folds
each: [ * eval ] ;
reverse-each: [ / eval ] ;
foldl: [ swapd each ] ;;
foldr: [ [ swap ] swap + swapd reverse-each ] ;;
foldl1: [ [ uncons ] dip each ] ;;
foldr1: [ [ uncons ] dip reverse-each ] ;;
fold: [ foldl1 ] ;;
runn: [ [ -- dup -1 > ] [ [ run ] dip ] while drop ] ;
times: [ runn drop ] ;
guard: [ [ keep ] >> dip branch ] ;
orelse: [ [ null? ~ ] guard ] ;
keepif: [ over unit if ] ;
until: [ [ [ ~ ] + ] dip while ] ;
forever: [ [ eval ] keep [ forever ] >> eval ] ;
either?: [ bi + ] ;

appl: [ >> in ] ;
y: [ [ dup >> ] swap + dup >> ] ;

// functional
chain: [ over nothing? ~ swap when ] ;
fmap: [ eval ] ;
map-reduce: [ [ map ] dip fold ] ;
reduce: [ foldl ] ;;
filter: [ [ dup empty swap ] dip [ keepif ] >> map swap * ] ;

// aggregate reduction
maximum: [ [ max ] fold ] ;;
minimum: [ [ min ] fold ] ;;
reverse: [ dup ln 1 > [ uncons 'reverse' eval swap + ] when ] ;

// flatten*: [
//   dup array?
//   [ [ 'flatten*' eval ] foreach ]
//   when
// ] ;
// flatten: [ [ flatten* ] appl ] ;

// math
neg: [ 0 swap - ] ;
sum: [ [ + ] fold ] ;

/**
 * ## `dict`
 * returns the local dictionary
 *
 * ( -> {array} )
 */
// dict: [ locals [ dup rcl ] map object ] ;

/**
  * ## `nop`
  * no op
  *
  * ( -> )
  */
nop: [] ;

/**
 * Calls the second quotation in the first pair whose first quotation yields a truthy value.
 */
cond: [
  dup empty?
  [
    uncons slip slipd
    [ cond ] >>
    branch
  ] unless
] ;

/**
 * Calls the second quotation in the first pair whose first quotation matchs the last item on the stack
 */
p-cond: [
  dup empty?
  [
    uncons [ eval [ dupd =~ ] dip ] dip
    [ p-cond ] >>
    branch
  ] unless
] ;

/**
 * Returns the second item in the first pair whose first quotation matches the last item on the stack
 */
p-choose: [
  dup empty?
  [
    uncons [ eval [ dupd =~ ] dip [ drop ] swap << ] dip
    [ p-choose ] >>
    branch
  ] unless
] ;

x: [ __filename ] ;
