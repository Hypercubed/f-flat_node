/**
 * # Core defined words
 */

/**
 * `;` - define function
 *
 */
';' [ 
  [ dup defer ] swap q< eval q>  // forward definition to support recursive words
  inline                         // inline and bind to scope
  def                            // define
] def

// Comparisons
>: [ <=> 1 = ] ;
<: [ <=> -1 = ] ;
>=: [ < ~ ] ;
<=: [ > ~ ] ;
!=: [ = ~ ] ;

'types.ff' require
'testing.ff' require
'shuffle.ff' require

// keep/check
keep: [ sip ] ;      // B [a] -> B a B    (aka sip)
check: [ dupd eval ] ;     // B [a] -> B B a    (aka w)

// 
in: [ ( swap eval ) ] ;
get: [ q< @ dup null? swap q> swap choose ] ;
zipwith: [ zipinto in ] ;
return: [ stack send ] ;
yield: [ return suspend ] ;
delay: [ [ sleep ] >> slip eval ] ;

// control
_do: [ dup dipd ] ;
_check: [ q< q< boolean q> q> ] ;
branch: [ _check choose eval ] ;
when: [ [ ] branch ] ;
unless: [ [ ] swap branch ] ;
ifte: [ slipd branch ] ;
if: [ slip when ] ;
loop: [ [ eval ] keep [ loop ] >> when ] ;
while: [ swap _do + [ loop ] >> when ] ;
runn: [ [ 1 - dup -1 > ] [ [ run ] dip ] while drop ] ;
times: [ runn drop ] ;
dupn: [ [ dup ] swap times ] ;

// aggregates
slice: [ [ % ] dip \ ] ;
pop: [ -1 \ ] ;
shift: [ 1 % ] ;
car: [ 0 @ ] ;
cdr: [ 1 % ] ;
first: [ 0 @ ] ;
last: [ -1 @ ] ;
rest: [ 1 % ] ;
head: [ \ ] ;
tail: [ % ] ;
startswith: [ dup ln [ head ] >> dip = ] ;
endswith: [ dup ln [ tail ] >> dip = ] ;
contains: [ indexof 1 > ] ;

// lists
empty?: [ ln 0 = ] ;
unit: [ [ ] >> ] ;
cons: [ >> ] ;                       // aka unshift
pair: [ unit >> ] ;
uncons: [ [ first ] [ rest ] bi ] ;  // aka shift

// folds
each: [ * eval ] ;
reverse-each: [ / eval ] ;
foldl: [ swapd each ] ;
foldr: [ [ swap ] swap + swapd reverse-each ] ;
foldl1: [ [ uncons ] dip each ] ;
foldr1: [ [ uncons ] dip reverse-each ] ;
fold: [ foldl1 ] ;
guard: [ [ keep ] >> dip branch ] ;
orelse: [ [ null? ~ ] guard ] ;
keepif: [ over unit if ] ;
until: [ [ [ ~ ] + ] dip while ] ;
forever: [ [ eval ] keep [ forever ] >> eval ] ;
either?: [ bi + ] ;

appl: [ >> in ] ;
y: [ [ dup >> ] swap + dup >> ] ;

// functional
map: [ * in ] ;

    [ [ 1 2 3 ] [ 2 * ] map [ 2 4 6 ] assert_equal ] 'map' test
    [ [ 1 2 3 4 ] [ 2 % 0 = ] map [ false true false true ] assert_equal ] 'map' test

chain: [ over nothing? ~ swap when ] ;
fmap: [ eval ] ;
map-reduce: [ [ map ] dip fold ] ;
reduce: [ foldl ] ;
filter: [ [ dup empty swap ] dip [ keepif ] >> map swap * ] ;

    [ [ 1 2 3 4 ] [ 2 % 0 = ] filter [ 2 4 ] assert_equal ] 'filter' test
    [ [ 1 2 3 4 ] [ 2 > ] filter [ 3 4 ] assert_equal ] 'filter' test

// aggregate reduction
reverse: [ dup ln 1 > [ uncons [ reverse ] eval swap + ] when ] ;

    [ 'abcd' reverse 'dcba' assert_equal ] 'reverse' test

/**
  * ## `nop`
  * no op
  *
  * ( -> )
  */
nop: [] ;

pluck: [ [ true ] * object swap * ] ;

    [ { x: 1, y: 2, z: 3 } [ x: z: ] pluck { x: 1, z: 3} assert_equal ] 'pluck' test
