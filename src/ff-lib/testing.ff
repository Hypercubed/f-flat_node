throws?: [ [ false ] + [ true ] in-catch -1 @ ] ;

dup2: [ q< dup q> swap q< dup q> swap ] ;
slip: [ q< eval q> ] ;
dip: [ swap slip ] ;
unless: [ q< boolean q> [ ] swap choose eval ] ;
<=: [ > ~ ] ;

assert: [
  dup boolean
  [ drop ]
  [ 
    'Assertion error: ' swap string << dup println
    throw
  ]
  choose eval
] ;

assert_false: [
  dup false =
  [ drop ]
  [
    'Assertion error: ' swap string << '!= false' << dup println
    throw
  ]
  choose eval
] ;

assert_equal: [
  dup2 =
  [ drop drop ]
  [
    'Assertion error: ' swap string << ' != ' << swap string << dup println
    throw
  ]
  choose eval
] ;

assert_zero: [
  dup 5e-20 <=
  [ drop ]
  [
    'Assertion error: ' swap string << ' !~ 0' << dup println
    throw
  ]
  choose eval
] ;

assert_length: [
  dup2 [ ln ] dip =
  [ drop drop ]
  [
    swap
    'Assertion error: length of ' swap string << ' != ' << swap string << dup println
    throw
  ]
  choose eval
] ;

red: [
  "\u001b[31m"
  swap
  "\u001b[0m"
  + +
] ;

test: [
  ' âœ˜ ' red swap + ' failed' + [ println ] >>
  [ throws? ] dip
  [ ]
  choose eval
] ;

// [ false assert ] 'testing assert' test
// [ 1 2 assert_equal ] 'assert_equal' test
// [ 1 assert_zero ] 'assert_zero' test
// ['abc' 4 assert_length ] 'assert_zero' test

