/**
 * # Module loader
 */

// Resolve path relative to file
__import-resolve: [ ( prelude.__sys_path__ ) >> resolve ] ;

/**
 * ## `include`
 * Reads a file onto the stack as a string and evaluates the content
 */
 __include: [ read eval ] ;
include: [ __import-resolve __include ] ;;

/**
 * ## `export`
 * Exports the current vocab and sens to parent
 */
export: [ vocab send ] ;;


__module_hash: [ hex-hash '_' swap + ] ;
__load-module: [ [ dup [ ] >> '__filename' swap def __include export ] >> fork drop ] ;
__load-and-sto-module: [ dup __load-module swap __module_hash swap def ] ;;

/**
 * ## `import`
 * Loads and creates a module from a file
 */
import: [
  __import-resolve   
  dup __module_hash defined?
    [ __module_hash eval ]
    [ dup __load-and-sto-module __module_hash eval ]
    choose eval
] ;;

/**
 * ## `require`
 * Imports and uses a module from a file
 */
require: [
  import
  use
] ;

/**
 * ## `if-exists-load`
 * Loads a file if it exists
 */
if-exists-load: [ dup exists swap [ __include ] >> [ ] choose eval ] ;;
