'testing.ff' require

_stackn: [ [ ] swap [ >> ] swap times ] ;

=>: [ dup ln swap [ _stackn ] dip swap [ ; ] zipinto ] ;
lambda: [ + in eval ] ;

// f x y z = y2 + x2 âˆ’ |y|  (The Dark Side, http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html)
_f: [
  ( x: y: z: ) => [ .y 2 ^ .x 2 ^ + .y abs - ] lambda
] ;

    [ 
      1 2 3 _f 3 assert_equal
      5 8 13 _f 81 assert_equal
    ] 'the dark side' test

fry: [ integers [ string '$' swap + ] map ] ;
$=>: [ fry => ] ;

_f2: [
  3 $=> [ .$1 2 ^ .$2 2 ^ + .$2 abs - ] lambda
] ;

    [ 
      1 2 3 _f2 3 assert_equal
      5 8 13 _f2 81 assert_equal
    ] 'the dark side (fried)' test