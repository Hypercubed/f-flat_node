'core.ff' import use
'shuffle.ff' import use
'math.ff' import use
'strings.ff' import use
'types.ff' import use
'datetime.ff' import use

.: [ [ unstack ] >> dip eval ] ;

!!: [ null? ~ ] ;;
?@: [ [ dup !! ] dip [ @ ] >> [ drop null ] branch ] ;

truthy?: [ boolean ] ;
falsy?: [ truthy? ~ ] ;;

// Misc
compose: [ + ] ;
prepose: [ swap + ] ;

with: [ [ swap [ swap ] ] dip + >> ] ;
eval2: [ slip eval ] ;
replicate: [ [ unit ] dip * ] ;
nth: [ -- @ ] ;
dupn: [ [ dup ] swap times ] ;

// side effects
trace: [ trace: set-log-level ] ;
timing: [ timing: set-log-level ] ;

// quick check
for-all: [ [ [ 100 times ] >> in ] dip [ ~ ] + filter ] ;
check-for-all: [ for-all dup empty? [ '+++ OK, passed 100 tests.' println drop ] [ [ ' Failed!' + println ] map ] branch ] ;

// generators
next-fib*: [ tuck + ] ;
fib*: [ ( 0 1 ) dip [ 0 1 [ tuck + ] yield ] [ in ] rolldown 2 - times drop ] ;
count*: [ [ 0 [ ++ dup yield: dip ] forever ] ] ;
cycle*: [ [ [ 1 splitat swap [ + ] keep eval send suspend ] forever ] >> ] ;

// async
spawnsplit: [ spawn2 eval2 ] ;
spawn2: [ [ spawn ] dip spawn ] ;

// fetch
fetch-json: [ read parse-json ] ;
site-size: [ read ln ] ;
site-war: [ dup [ [ site-size ] >> ] map all zip object ] ;

// random
rand-integer: [ rand-u32 ] ;
rand-char: [ rand-integer 128 % itoa ] ;
rand-seq: [ rand-integer 16 % ++ [ times ] >> >> in ] ;
rand-string: [ [ rand-char ] rand-seq sum ] ;
rand-bool: [ rand-u32 even? ] ;

// repl
cls: [ "\u001B[2J\u001B[0;0f" println ] ;

// switch
stack-copy: [ stack run ] ;
stack-check: [ q< stack-copy q> =~ ] ;;
case: [ [ stack-check ] dip when ] ;;
switch: [ [ unstack case ] foreach ] ;;

// lambdas
=>: [ [ sto ] foreach-rev ] ;
lambda-eval: [
  [ stack ] dip
  unstack: swap >>
  >> fork unstack
] ;
lambda: [ 
  [ lambda-eval ] >>
] ;

// f x y z = y2 + x2 âˆ’ |y|
f: [ [x: y: z:] => y 2 ^ x 2 ^ + y abs - ] lambda ;

// short circuit logicals
&&: [ slip when ] ;;
||: [ slip [] swap branch ] ;;

length: [ ln ] ;  // just an alias

quicksort: [
  dup ln 1 >             // when length > 1
  [
    xxs                         // split into first [ ...rest ]
    over dup                    // shuffle
    [ [ <= ] >> filter ] >>     // filter values less than or equal to pivot
    swap [ [ > ] >> filter ] >> // filter values greater than the pivot
    bi
    [ quicksort ] bi@           // quicksort each sublist
    [ swap + ] dip +            // merge results 
  ] when
] ;

p-reverse: [
  dup ln
  [
    0 []
    1 []
    _ [ xxs reverse swap + ]
  ]
  pattern-branch
] ;

fizzbuzz: [
  dup 15 divisor?
  [ drop 'fizzbuzz' ]
  [
    dup 3 divisor?
    [ drop 'fizz' ]
    [ 
      dup 5 divisor?
      [ drop 'buzz' ]
      when
    ]
    branch
  ]
  branch
  println
] ;

/**
 * FizzBuzz using pattern matching
 */
p-fizzbuzz: [
  dup [ 5 divisor? ] [ 3 divisor? ] bi pair
  [
    [ true true ] [ drop 'fizzbuzz' ]
    [ false true ] [ drop 'fizz' ]
    [ true false ] [ drop 'buzz' ]
  ]
  pattern-choose eval println
] ;

/**
 * The quadratic equation using lambdas
 */
quad: [
  [ a: b: c: ] =>
    b -1 * b b * 4 a c * * - sqrt -+
    [ 2 a * / ] bi@
] lambda ;