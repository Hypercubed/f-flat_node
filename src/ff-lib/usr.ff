'shuffle.ff' require
'testing.ff' require
'switch-patterns.ff' require

!!: [ null? ~ ] ;

// Misc
compose: [ + ] ;
prepose: [ swap + ] ;

with: [ [ swap [ swap ] ] dip + >> ] ;
eval2: [ slip eval ] ;
replicate: [ [ unit ] dip * ] ;
nth: [ -- @ ] ;

// with-system-property: [ 
//   over get-system-property
//   [ dupd set-system-property ] dip
//   swapd swap
//   in
//   [ set-system-property ] dip
// ] ;

// side effects
traceoff: [ 'log-level' 'warn'  set-system-property ] ;
traceon: [ 'log-level' 'trace' set-system-property ] ;
timing: [ 'log-level' 'timing' set-system-property ] ;
// trace: [ traceon eval traceoff ] ; // doesn't work!!

// quick check
for-all: [ [ [ 100 times ] >> in ] dip [ ~ ] + filter ] ;
check-for-all: [ for-all dup empty? [ '+++ OK, passed 100 tests.' println drop ] [ [ ' Failed!' + println ] map ] branch ] ;

// generators
next-fib*: [ tuck + ] ;
fib*: [ ( 0 1 ) dip [ 0 1 [ tuck + ] yield ] [ in ] rolldown 2 - times drop ] ;
count*: [ [ 0 [ ++ dup [ yield ] dip ] forever ] ] ;
// cycle*: [ [ [ 1 splitat swap [ + ] keep eval send suspend ] forever ] >> ] ;

// async
spawn2: [ [ spawn ] dip spawn ] ;
spawnsplit: [ spawn2 eval2 ] ;

// fetch
site-size: [ read ln ] ;
site-war: [ dup [ [ site-size ] >> ] map all zip object ] ;

// random
rand-integer: [ rand-u32 ] ;
rand-char: [ rand-integer 128 % itoa ] ;
rand-seq: [ rand-integer 16 % ++ ++ ++ ++ [ times ] >> >> in ] ;
rand-string: [ [ rand-char ] rand-seq sum ] ;
rand-bool: [ rand-u32 even? ] ;

// repl
cls: [ "\u001B[2J\u001B[0;0f" println ] ;

// short circuit logicals
&&: [ slip when ] ;
||: [ slip [] swap branch ] ;

p-reverse: [
  dup ln
  [
    [ 0 p-case [] ]
    [ 1 p-case [] ]
    [ _ p-case [ uncons p-reverse swap + ] ]
  ]
  switch
] ;

/**
 * The quadratic equation using lambdas
 */
quad: [
  [ a: b: c: ] => [
    .b -1 * .b .b * 4 .a .c * * - sqrt -+
    [ 2 .a * / ] bi@
  ] lambda
] ;

    [ 1 -3 0 quad 3 assert_equal 0 assert_equal ] 'quadradic equation lambda' test
    [ 5 6 1 quad -0.2 assert_equal -1 assert_equal ] 'quadradic equation lambda' test
    [ 5 2 1 quad -0.2 0.4 i * + assert_equal -0.2 -0.4 i * + assert_equal ] 'quadradic equation lambda' test

// s-test: [
//   `
//   Multi line string
//   Hello
//   World
//   `
// ] ;

phi: ( 1 5 sqrt + 2 / ) ;  // the golden ratio
psi: ( phi inv ~ ) ;

lucas: [ phi swap ^ floor ] ;
binet: [ [ phi swap ^ ] [ psi swap ^ ] bi - 5 sqrt / ] ;

fib: [
  [
    [ 0        p-case [ ]]
    [ 1        p-case [ ]]
    [ [ 10 > ] case   [ binet round ]]
    [ [ 0 <  ] case   [ abs dup 1 + -1 swap ^ swap fib * ]]
    [ true            [ [1 - fib]  [2 - fib] bi + ]]
  ] switch
] ;

ls: [
  words [ show ] map 
] ;

