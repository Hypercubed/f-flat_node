import { signature, Any } from '@hypercubed/dynamo';

import { ffPrettyPrint, FFlatError, rewrite } from '../utils';
import { dynamo, Sentence, Key, StackValue, ScopeModule } from '../types';
import { StackEnv } from '../engine/env';

/**
 * Converts a stack item to a "function" definition
 */
class CreateAction {
  // arrays are converted to sentences
  @signature()
  array(x: any[]): Sentence {
    return new Sentence(x);
  }

  // objects are converted to and object of actions
  @signature()
  plainObject(obj: Object) {
    return Object.keys(obj).reduce((p, key) => {
      p[key] = createAction(obj[key]);
      return p;
    }, {});
  }

  // symbols are symbols
  @signature(Symbol)
  symbol(x: any): any {
    return x;
  }

  // everything else is converetd to a sentence containing the single item
  @signature(Any)
  any(x: any): any {
    return new Sentence([x]);
  }
}

const createAction = dynamo.function(CreateAction);

// For all dictionary actions, note:
// * The dictionary is mutable
// * Stack items are immutable

/**
 * # Internal Vocabulary Words
 */
export const dict = {
  /**
   * ## `defer`
   *
   * Stores a value in the dictionary that raises an error when executed.
   * Used to allocate a word before it is used, for example in mutually-recursive
   *
   * `a: ->`
   *
   * ```
   * f♭> a: defer
   * [ ]
   * ```
   */
  defer(this: StackEnv, lhs: string | Key) {
    this.dict.set(String(lhs), undefined);
  },

  /**
   * ## `def`
   *
   * stores a definition in the current dictionary
   *
   * `a: [A] ->`
   *
   * ```
   * f♭> sqr: [ dup * ] def
   * [ ]
   * ```
   */
  def(this: StackEnv, lhs: string | Key, rhs: StackValue[] | ScopeModule) {
    this.dict.set(String(lhs), createAction(rhs));
  },

  /**
   * ## `use`
   *
   * Move the contents of a map into scope
   * - The map must be a map of keys to global symbols generated by `vocab`
   *
   * `{A} ->`
   *
   * ```
   * f♭> { ... } use
   * [ ]
   * ```
   */
  use(this: StackEnv, dict: ScopeModule) {
    this.dict.useVocab(createAction(dict));
  },

  /**
   * ## `vocab`
   *
   * Write the current local vocabulary to the stack
   * - The returned value is a map of strings (keys) to global symbols
   *
   * `-> {A}`
   *
   * ```
   * f♭> vocab
   * [ { ... } ]
   * ```
   */
  vocab(this: StackEnv) {
    return this.dict.getVocab();
  },

  /**
   * ## `inline`
   *
   * inline a quote, recursively expands defined words to global symbols
   *
   * `[A] -> [A']`
   *
   * ```
   * f♭> [ 2 sqr ] inline
   * [ [ 2 dup * ] ]
   * ```
   */
  inline(this: StackEnv, x: Array<StackValue>) {
    return this.dict.inline(x);
  },

  /**
   * ## `defined?`
   * returns true if the word is defined in the current vocabulary
   *
   * `a: -> bool`
   *
   * ```
   * f♭> 'sqr' defined?
   * [ true ]
   * ```
   */
  'defined?'(this: StackEnv, a: string) {
    const r = this.dict.get(a);
    return typeof r !== 'undefined';
  },

  /**
   * ## `see`
   *
   * recalls the definition of a word as a string
   *
   * `a: -> str`
   *
   * ```
   * f♭> 'sqr' see
   * [ '[ dup * ]' ]
   * ```
   */
  see(this: StackEnv, a: string | Key) {
    const r = this.dict.get(String(a));
    return (typeof r === 'undefined') ?  null : ffPrettyPrint.stringify(r);
  },

  /**
   * ## `show`
   *
   * prints the definition of a word as a formatted string
   *
   * `a: ->`
   *
   * ```
   * f♭> "sqr" show
   * [ dup * ]
   * [ ]
   * ```
   */
  show(this: StackEnv, a: string) {
    const r = this.dict.get(String(a));
    return console.log(ffPrettyPrint.color(r));
  },

  /**
   * ## `words`
   *
   * `-> [str*]`
   *
   * returns a list of defined words
   */
  words(this: StackEnv): string[] {
    return this.dict.words();
  },

  /**
   * ## `locals`
   *
   * `-> [str*]`
   *
   * returns a list of locals words
   */
  locals(this: StackEnv): string[] {
    return this.dict.localWords();
  },

  /**
   * ## `scoped`
   *
   * `-> [str*]`
   *
   * returns a list of local scoped words
   */
  scoped(this: StackEnv): string[] {
    return this.dict.scopedWords();
  },

  /**
   * ## `rewrite`
   *
   * `{A} [B] -> [C]`
   *
   * rewrites an expression using a set of rewrite rules
   *
   */
  rewrite(this: StackEnv, rules: Object, a: StackValue) {
    return rewrite(a, rules);
  },

  'show-globals'(this: StackEnv) {
    const obj = (this.dict as any).global;
    const keys = Object.getOwnPropertySymbols(obj);
    keys.forEach((key) => {
      const body = obj[key];
      console.log(ffPrettyPrint.trace(key), typeof body === 'function' ? '[internal]' : ffPrettyPrint.trace(obj[key]));
    });

    console.log(` - ${keys.length} global symbols - `);
  },

  // 'global-sif'(this: StackEnv) {
  //   const obj = (this.dict as any).global;
  //   const keys = Object.getOwnPropertySymbols(obj);
  //   keys.forEach((key) => {
  //     const body = obj[key];
  //     if (body instanceof Sentence) {
  //       body.value.flat(Infinity).forEach((v: any) => {
  //         if (v instanceof Alias) {
  //           console.log(key.description, '(calls)' , v.toString());
  //         }
  //       });
  //     }
  //   });
  // },

  // 'global-adj-sif'(this: StackEnv) {
  //   const obj = (this.dict as any).global;
  //   const keys = Object.getOwnPropertySymbols(obj);
  //   keys.forEach((key) => {
  //     const body = obj[key];
  //     if (body instanceof Sentence) {
  //       let last: any = null;
  //       body.value.flat(Infinity).forEach((v: any) => {
  //         if (v instanceof Alias) {
  //           if (last) {
  //             console.log(last.toString(), '->' , v.toString());
  //           }
  //           last = v;
  //         }
  //       });
  //     }
  //   });
  // },

  // 'global-nnf'(this: StackEnv) {
  //   const obj = (this.dict as any).global;
  //   const keys = Object.getOwnPropertySymbols(obj);
  //   console.log(['caller', 'first', 'second'].join(','));
  //   keys.forEach((key) => {
  //     const body = obj[key];
  //     if (body instanceof Sentence) {
  //       let last: any = null;
  //       body.value.flat(Infinity).forEach((v: any) => {
  //         if (v instanceof Alias) {
  //           if (last) {
  //             console.log([key.description, last.toString(), v.toString()].join(','));
  //           }
  //           last = v;
  //         }
  //       });
  //     }
  //   });
  // }
};
